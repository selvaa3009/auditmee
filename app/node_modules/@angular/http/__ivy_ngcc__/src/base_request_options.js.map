{"version":3,"file":"base_request_options.js","sources":["../../../../modules/@angular/http/src/base_request_options.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * var req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  search: URLSearchParams;\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType;\n/**\n * @param {?=} __0\n */\nconstructor(\n      {method, headers, body, url, search, withCredentials,\n       responseType}: RequestOptionsArgs = {}) {\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.search =\n        search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * var req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      search: options && options.search != null ?\n          (typeof options.search === 'string' ? new URLSearchParams(options.search) :\n                                                options.search.clone()) :\n          this.search,\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.search;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new BaseRequestOptions();\n * var req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}