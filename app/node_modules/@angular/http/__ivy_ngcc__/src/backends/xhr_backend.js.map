{"version":3,"file":"xhr_backend.js","sources":["../../../../../modules/@angular/http/src/backends/xhr_backend.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {__platform_browser_private__} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = __platform_browser_private__.getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}