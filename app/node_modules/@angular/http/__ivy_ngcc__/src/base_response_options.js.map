{"version":3,"file":"base_response_options.js","sources":["../../../../modules/@angular/http/src/base_response_options.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AACH;AAGkB;AAEd;AAA4C;AAGhD;AAAG,OAPI,EAAC,UAAU,EAAC,MAAM,eAAe;AACxC,OACO,EAAC,YAAY,EAAC,MAAM,SAAS;AACpC,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW;AAEjC;AACA;AACA;AACA;AAAG;AACmE;AAChB;AACpD;AACoE;AACI;AACzE;AACwE;AAC9B;AAC3C;AAC8E;AAAG;AAErE;AAC4C;AAAG;AAE1B;AACV;AACtB;AAC6B;AAAG;AAE4B;AAC7D;AAAG;AAEO,GACP;AACH;AACa,IAuBb;AACA;AAEA,OADG;AACH,IAAA,yBAAY,EAAwE;AACpF,YADY,4BAAwE,EAAvE,cAAI,EAAE,kBAAM,EAAE,oBAAO,EAAE,0BAAU,EAAE,cAAI,EAAE,YAAG;AAAE,QACvD,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;AAC3C,QAAI,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,GAAG,MAAM,GAAG,IAAI,CAAC;AACjD,QAAI,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC;AACpD,QAAI,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC;AAC7D,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;AAC3C,QAAI,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;AACxC,IAAE,CAAC;AACH,IAAA;AACA;AACI;AACI;AAEP;AACW;AAAO;AACI;AAEA;AAAO;AAGjB;AAAO;AAAqB;AAGvC;AAAO;AAEU;AACZ;AAAW;AAEO;AAClB;AAAY;AACX;AAEM;AAGqB;AAAW;AAC7B;AACd,OAHA;AACH,IAAA,+BAAK,GAAL,UAAM,OAA6B;AAAI,QACnC,MAAM,CAAC,IAAI,eAAe,CAAC;AAC/B,YAAM,IAAI,EAAE,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;AACtE,YAAM,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;AAC9E,YAAM,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;AAClF,YAAM,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI,GAAG,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU;AAC9F,YAAM,IAAI,EAAE,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;AACtE,YAAM,GAAG,EAAE,OAAO,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,GAAG,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG;AAClE,SAAK,CAAC,CAAC;AACP,IAAE,CAAC;AACF,IAAD,sBAAC;AAAD,CAAC,AAxED,IAwEC;AAED;AACA,IAAA;AACA;AACI;AAEA,OADD;AACH,IAAA,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC;AAC/B,IAAA;AACA;AACI;AACI;AAEA,OADL;AACH,IAAA,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;AACjC,IAAA;AACA;AACI;AAEA,OADD;AACH,IAAA,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC;AAClC,IAAA;AACA;AACI;AAEA,OADD;AACH,IAAA,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC;AACrC,IAAA;AACA;AACI;AAEA,OADD;AACH,IAAA,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC;AAC/B,IAAA,gBAAgB;AAChB,IAAA,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC;AAC9B,CAAC;AAED;AACA;AACA;AAAG;AACe;AACD;AAC2B;AAC1C;AAC4E;AACG;AACnB;AAC7D;AACgE;AACjE;AACa;AAC0B;AACsB;AACoB;AAChE;AACW;AAAG;AAEa;AACQ;AACpD;AAAG;AAE6E;AAC/E;AAAG;AAEsE;AACtE;AAAG;AAEmE;AAAG;AAC3E;AAEsD;AAAG;AAEzB;AACF;AACpB;AAC4B;AAAQ;AAEgC;AACnC;AAAO;AACpD;AAEO,GACJ;AACH;AAAsD,IAAb,uCAAe;AAAC,IACzD;AACiB,QAAb,kBAAM,EAAC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,OAAO,EAAE,EAAC,CAAC,CAAC;AAC/F,IAAE,CAAC,AAGD;IAFK,JAGP,IAAA,kBAAkB;WAHD,GAA0B,UAC3C,EAAE,IAAI,EAAE,UAAU,EAAE,OACnB,nDAED,IAAO,kCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F;;;;;gDAAC;AACF,IAAA,0BAAC;AAAD,CAAC,AAVD,CAAyC,eAAe,GAUvD;AAED;AACA,IAAA,gBAAgB;AAChB,IAAA,mBAAmB,CAAC,UAAU,CAAC;AAC/B,IAAA;AACA;AACI;AAEA,OADD;AACH,IAAA,mBAAmB,CAAC,cAAc,CAAC;AACnC,CAAC;AACD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n * \n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n * \n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n * \n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n * \n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n * \n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n * \n * \\@experimental\n */\nexport class ResponseOptions {\n  // TODO: FormData | Blob\n  /**\n   * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\n   */\n  body: string|Object|ArrayBuffer|Blob;\n  /**\n   * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n   * associated with the response.\n   */\n  status: number;\n  /**\n   * Response {@link Headers headers}\n   */\n  headers: Headers;\n  /**\n   * @internal\n   */\n  statusText: string;\n  /**\n   * @internal\n   */\n  type: ResponseType;\n  url: string;\n/**\n * @param {?=} __0\n */\nconstructor({body, status, headers, statusText, type, url}: ResponseOptionsArgs = {}) {\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n/**\n * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n * override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * This may be useful when sharing a base `ResponseOptions` object inside tests,\n * where certain properties may change from test to test.\n * \n * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: {name: 'Jeff'}\n * });\n * var res = new Response(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('options.url:', options.url); // null\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * console.log('res.url:', res.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\nfunction ResponseOptions_tsickle_Closure_declarations() {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n * @type {?}\n */\nResponseOptions.prototype.body;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n * @type {?}\n */\nResponseOptions.prototype.status;\n/**\n * Response {\\@link Headers headers}\n * @type {?}\n */\nResponseOptions.prototype.headers;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.statusText;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.type;\n/** @type {?} */\nResponseOptions.prototype.url;\n}\n\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n * \n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n * \n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n * \n * \\@experimental\n */\nexport class BaseResponseOptions extends ResponseOptions {\nconstructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseResponseOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseResponseOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}