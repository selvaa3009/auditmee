import { MediaChange } from '../media-change';
import { BreakPoint } from '../breakpoints/break-point';
import { LayoutConfigOptions } from '../tokens/library-config';
import { BreakPointRegistry, OptionalBreakPoint } from '../breakpoints/break-point-registry';
/**
 * Interface to apply PrintHook to call anonymous `target.updateStyles()`
 */
import * as ɵngcc0 from '@angular/core';
export interface HookTarget {
    activatedBreakpoints: BreakPoint[];
    updateStyles(): void;
}
export declare const BREAKPOINT_PRINT: {
    alias: string;
    mediaQuery: string;
    priority: number;
};
/**
 * PrintHook - Use to intercept print MediaQuery activations and force
 *             layouts to render with the specified print alias/breakpoint
 *
 * Used in MediaMarshaller and MediaObserver
 */
export declare class PrintHook {
    protected breakpoints: BreakPointRegistry;
    protected layoutConfig: LayoutConfigOptions;
    constructor(breakpoints: BreakPointRegistry, layoutConfig: LayoutConfigOptions);
    /** Add 'print' mediaQuery: to listen for matchMedia activations */
    withPrintQuery(queries: string[]): string[];
    /** Is the MediaChange event for any 'print' @media */
    isPrintEvent(e: MediaChange): Boolean;
    /** What is the desired mqAlias to use while printing? */
    readonly printAlias: string[];
    /** Lookup breakpoints associated with print aliases. */
    readonly printBreakPoints: BreakPoint[];
    /** Lookup breakpoint associated with mediaQuery */
    getEventBreakpoints({ mediaQuery }: MediaChange): BreakPoint[];
    /** Update event with printAlias mediaQuery information */
    updateEvent(event: MediaChange): MediaChange;
    /**
     * Prepare RxJs filter operator with partial application
     * @return pipeable filter predicate
     */
    interceptEvents(target: HookTarget): (event: MediaChange) => void;
    /** Stop mediaChange event propagation in event streams */
    blockPropagation(): (event: MediaChange) => boolean;
    /**
     * Save current activateBreakpoints (for later restore)
     * and substitute only the printAlias breakpoint
     */
    protected startPrinting(target: HookTarget, bpList: OptionalBreakPoint[]): void;
    /** For any print de-activations, reset the entire print queue */
    protected stopPrinting(target: HookTarget): void;
    /**
     * To restore pre-Print Activations, we must capture the proper
     * list of breakpoint activations BEFORE print starts. OnBeforePrint()
     * is not supported; so 'print' mediaQuery activations must be used.
     *
     * >  But activated breakpoints are deactivated BEFORE 'print' activation.
     *
     * Let's capture all de-activations using the following logic:
     *
     *  When not printing:
     *    - clear cache when activating non-print breakpoint
     *    - update cache (and sort) when deactivating
     *
     *  When printing:
     *    - sort and save when starting print
     *    - restore as activatedTargets and clear when stop printing
     */
    collectActivations(event: MediaChange): void;
    /** Is this service currently in Print-mode ? */
    private isPrinting;
    private queue;
    private deactivations;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PrintHook, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PrintHook>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQtaG9vay5kLnRzIiwic291cmNlcyI6WyJwcmludC1ob29rLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVkaWFDaGFuZ2UgfSBmcm9tICcuLi9tZWRpYS1jaGFuZ2UnO1xuaW1wb3J0IHsgQnJlYWtQb2ludCB9IGZyb20gJy4uL2JyZWFrcG9pbnRzL2JyZWFrLXBvaW50JztcbmltcG9ydCB7IExheW91dENvbmZpZ09wdGlvbnMgfSBmcm9tICcuLi90b2tlbnMvbGlicmFyeS1jb25maWcnO1xuaW1wb3J0IHsgQnJlYWtQb2ludFJlZ2lzdHJ5LCBPcHRpb25hbEJyZWFrUG9pbnQgfSBmcm9tICcuLi9icmVha3BvaW50cy9icmVhay1wb2ludC1yZWdpc3RyeSc7XG4vKipcbiAqIEludGVyZmFjZSB0byBhcHBseSBQcmludEhvb2sgdG8gY2FsbCBhbm9ueW1vdXMgYHRhcmdldC51cGRhdGVTdHlsZXMoKWBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIb29rVGFyZ2V0IHtcbiAgICBhY3RpdmF0ZWRCcmVha3BvaW50czogQnJlYWtQb2ludFtdO1xuICAgIHVwZGF0ZVN0eWxlcygpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgQlJFQUtQT0lOVF9QUklOVDoge1xuICAgIGFsaWFzOiBzdHJpbmc7XG4gICAgbWVkaWFRdWVyeTogc3RyaW5nO1xuICAgIHByaW9yaXR5OiBudW1iZXI7XG59O1xuLyoqXG4gKiBQcmludEhvb2sgLSBVc2UgdG8gaW50ZXJjZXB0IHByaW50IE1lZGlhUXVlcnkgYWN0aXZhdGlvbnMgYW5kIGZvcmNlXG4gKiAgICAgICAgICAgICBsYXlvdXRzIHRvIHJlbmRlciB3aXRoIHRoZSBzcGVjaWZpZWQgcHJpbnQgYWxpYXMvYnJlYWtwb2ludFxuICpcbiAqIFVzZWQgaW4gTWVkaWFNYXJzaGFsbGVyIGFuZCBNZWRpYU9ic2VydmVyXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFByaW50SG9vayB7XG4gICAgcHJvdGVjdGVkIGJyZWFrcG9pbnRzOiBCcmVha1BvaW50UmVnaXN0cnk7XG4gICAgcHJvdGVjdGVkIGxheW91dENvbmZpZzogTGF5b3V0Q29uZmlnT3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihicmVha3BvaW50czogQnJlYWtQb2ludFJlZ2lzdHJ5LCBsYXlvdXRDb25maWc6IExheW91dENvbmZpZ09wdGlvbnMpO1xuICAgIC8qKiBBZGQgJ3ByaW50JyBtZWRpYVF1ZXJ5OiB0byBsaXN0ZW4gZm9yIG1hdGNoTWVkaWEgYWN0aXZhdGlvbnMgKi9cbiAgICB3aXRoUHJpbnRRdWVyeShxdWVyaWVzOiBzdHJpbmdbXSk6IHN0cmluZ1tdO1xuICAgIC8qKiBJcyB0aGUgTWVkaWFDaGFuZ2UgZXZlbnQgZm9yIGFueSAncHJpbnQnIEBtZWRpYSAqL1xuICAgIGlzUHJpbnRFdmVudChlOiBNZWRpYUNoYW5nZSk6IEJvb2xlYW47XG4gICAgLyoqIFdoYXQgaXMgdGhlIGRlc2lyZWQgbXFBbGlhcyB0byB1c2Ugd2hpbGUgcHJpbnRpbmc/ICovXG4gICAgcmVhZG9ubHkgcHJpbnRBbGlhczogc3RyaW5nW107XG4gICAgLyoqIExvb2t1cCBicmVha3BvaW50cyBhc3NvY2lhdGVkIHdpdGggcHJpbnQgYWxpYXNlcy4gKi9cbiAgICByZWFkb25seSBwcmludEJyZWFrUG9pbnRzOiBCcmVha1BvaW50W107XG4gICAgLyoqIExvb2t1cCBicmVha3BvaW50IGFzc29jaWF0ZWQgd2l0aCBtZWRpYVF1ZXJ5ICovXG4gICAgZ2V0RXZlbnRCcmVha3BvaW50cyh7IG1lZGlhUXVlcnkgfTogTWVkaWFDaGFuZ2UpOiBCcmVha1BvaW50W107XG4gICAgLyoqIFVwZGF0ZSBldmVudCB3aXRoIHByaW50QWxpYXMgbWVkaWFRdWVyeSBpbmZvcm1hdGlvbiAqL1xuICAgIHVwZGF0ZUV2ZW50KGV2ZW50OiBNZWRpYUNoYW5nZSk6IE1lZGlhQ2hhbmdlO1xuICAgIC8qKlxuICAgICAqIFByZXBhcmUgUnhKcyBmaWx0ZXIgb3BlcmF0b3Igd2l0aCBwYXJ0aWFsIGFwcGxpY2F0aW9uXG4gICAgICogQHJldHVybiBwaXBlYWJsZSBmaWx0ZXIgcHJlZGljYXRlXG4gICAgICovXG4gICAgaW50ZXJjZXB0RXZlbnRzKHRhcmdldDogSG9va1RhcmdldCk6IChldmVudDogTWVkaWFDaGFuZ2UpID0+IHZvaWQ7XG4gICAgLyoqIFN0b3AgbWVkaWFDaGFuZ2UgZXZlbnQgcHJvcGFnYXRpb24gaW4gZXZlbnQgc3RyZWFtcyAqL1xuICAgIGJsb2NrUHJvcGFnYXRpb24oKTogKGV2ZW50OiBNZWRpYUNoYW5nZSkgPT4gYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTYXZlIGN1cnJlbnQgYWN0aXZhdGVCcmVha3BvaW50cyAoZm9yIGxhdGVyIHJlc3RvcmUpXG4gICAgICogYW5kIHN1YnN0aXR1dGUgb25seSB0aGUgcHJpbnRBbGlhcyBicmVha3BvaW50XG4gICAgICovXG4gICAgcHJvdGVjdGVkIHN0YXJ0UHJpbnRpbmcodGFyZ2V0OiBIb29rVGFyZ2V0LCBicExpc3Q6IE9wdGlvbmFsQnJlYWtQb2ludFtdKTogdm9pZDtcbiAgICAvKiogRm9yIGFueSBwcmludCBkZS1hY3RpdmF0aW9ucywgcmVzZXQgdGhlIGVudGlyZSBwcmludCBxdWV1ZSAqL1xuICAgIHByb3RlY3RlZCBzdG9wUHJpbnRpbmcodGFyZ2V0OiBIb29rVGFyZ2V0KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUbyByZXN0b3JlIHByZS1QcmludCBBY3RpdmF0aW9ucywgd2UgbXVzdCBjYXB0dXJlIHRoZSBwcm9wZXJcbiAgICAgKiBsaXN0IG9mIGJyZWFrcG9pbnQgYWN0aXZhdGlvbnMgQkVGT1JFIHByaW50IHN0YXJ0cy4gT25CZWZvcmVQcmludCgpXG4gICAgICogaXMgbm90IHN1cHBvcnRlZDsgc28gJ3ByaW50JyBtZWRpYVF1ZXJ5IGFjdGl2YXRpb25zIG11c3QgYmUgdXNlZC5cbiAgICAgKlxuICAgICAqID4gIEJ1dCBhY3RpdmF0ZWQgYnJlYWtwb2ludHMgYXJlIGRlYWN0aXZhdGVkIEJFRk9SRSAncHJpbnQnIGFjdGl2YXRpb24uXG4gICAgICpcbiAgICAgKiBMZXQncyBjYXB0dXJlIGFsbCBkZS1hY3RpdmF0aW9ucyB1c2luZyB0aGUgZm9sbG93aW5nIGxvZ2ljOlxuICAgICAqXG4gICAgICogIFdoZW4gbm90IHByaW50aW5nOlxuICAgICAqICAgIC0gY2xlYXIgY2FjaGUgd2hlbiBhY3RpdmF0aW5nIG5vbi1wcmludCBicmVha3BvaW50XG4gICAgICogICAgLSB1cGRhdGUgY2FjaGUgKGFuZCBzb3J0KSB3aGVuIGRlYWN0aXZhdGluZ1xuICAgICAqXG4gICAgICogIFdoZW4gcHJpbnRpbmc6XG4gICAgICogICAgLSBzb3J0IGFuZCBzYXZlIHdoZW4gc3RhcnRpbmcgcHJpbnRcbiAgICAgKiAgICAtIHJlc3RvcmUgYXMgYWN0aXZhdGVkVGFyZ2V0cyBhbmQgY2xlYXIgd2hlbiBzdG9wIHByaW50aW5nXG4gICAgICovXG4gICAgY29sbGVjdEFjdGl2YXRpb25zKGV2ZW50OiBNZWRpYUNoYW5nZSk6IHZvaWQ7XG4gICAgLyoqIElzIHRoaXMgc2VydmljZSBjdXJyZW50bHkgaW4gUHJpbnQtbW9kZSA/ICovXG4gICAgcHJpdmF0ZSBpc1ByaW50aW5nO1xuICAgIHByaXZhdGUgcXVldWU7XG4gICAgcHJpdmF0ZSBkZWFjdGl2YXRpb25zO1xufVxuIl19