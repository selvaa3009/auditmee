import { MatchMedia } from '../match-media/match-media';
import { BreakPointRegistry } from '../breakpoints/break-point-registry';
import { LayoutConfigOptions } from '../tokens/library-config';
/**
 * Class
 */
import * as ɵngcc0 from '@angular/core';
export declare class MediaTrigger {
    protected breakpoints: BreakPointRegistry;
    protected matchMedia: MatchMedia;
    protected layoutConfig: LayoutConfigOptions;
    protected _platformId: Object;
    protected _document: any;
    constructor(breakpoints: BreakPointRegistry, matchMedia: MatchMedia, layoutConfig: LayoutConfigOptions, _platformId: Object, _document: any);
    /**
     * Manually activate range of breakpoints
     * @param list array of mediaQuery or alias strings
     */
    activate(list: string[]): void;
    /**
     * Restore original, 'real' breakpoints and emit events
     * to trigger stream notification
     */
    restore(): void;
    /**
     * Whenever window resizes, immediately auto-restore original
     * activations (if we are simulating activations)
     */
    private prepareAutoRestore;
    /**
     * Notify all matchMedia subscribers of de-activations
     *
     * Note: we must force 'matches' updates for
     *       future matchMedia::activation lookups
     */
    private deactivateAll;
    /**
     * Cache current activations as sorted, prioritized list of MediaChanges
     */
    private saveActivations;
    /**
     * Force set manual activations for specified mediaQuery list
     */
    private setActivations;
    /**
     * For specified mediaQuery list manually simulate activations or deactivations
     */
    private simulateMediaChanges;
    /**
     * Replace current registry with simulated registry...
     * Note: this is required since MediaQueryList::matches is 'readOnly'
     */
    private forceRegistryMatches;
    /**
     * Save current MatchMedia::registry items.
     */
    private cacheRegistryMatches;
    /**
     * Restore original, 'true' registry
     */
    private restoreRegistryMatches;
    /**
     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver
     */
    private emitChangeEvent;
    private readonly currentActivations;
    private hasCachedRegistryMatches;
    private originalActivations;
    private originalRegistry;
    private resizeSubscription;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MediaTrigger, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MediaTrigger>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEtdHJpZ2dlci5kLnRzIiwic291cmNlcyI6WyJtZWRpYS10cmlnZ2VyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXRjaE1lZGlhIH0gZnJvbSAnLi4vbWF0Y2gtbWVkaWEvbWF0Y2gtbWVkaWEnO1xuaW1wb3J0IHsgQnJlYWtQb2ludFJlZ2lzdHJ5IH0gZnJvbSAnLi4vYnJlYWtwb2ludHMvYnJlYWstcG9pbnQtcmVnaXN0cnknO1xuaW1wb3J0IHsgTGF5b3V0Q29uZmlnT3B0aW9ucyB9IGZyb20gJy4uL3Rva2Vucy9saWJyYXJ5LWNvbmZpZyc7XG4vKipcbiAqIENsYXNzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1lZGlhVHJpZ2dlciB7XG4gICAgcHJvdGVjdGVkIGJyZWFrcG9pbnRzOiBCcmVha1BvaW50UmVnaXN0cnk7XG4gICAgcHJvdGVjdGVkIG1hdGNoTWVkaWE6IE1hdGNoTWVkaWE7XG4gICAgcHJvdGVjdGVkIGxheW91dENvbmZpZzogTGF5b3V0Q29uZmlnT3B0aW9ucztcbiAgICBwcm90ZWN0ZWQgX3BsYXRmb3JtSWQ6IE9iamVjdDtcbiAgICBwcm90ZWN0ZWQgX2RvY3VtZW50OiBhbnk7XG4gICAgY29uc3RydWN0b3IoYnJlYWtwb2ludHM6IEJyZWFrUG9pbnRSZWdpc3RyeSwgbWF0Y2hNZWRpYTogTWF0Y2hNZWRpYSwgbGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWdPcHRpb25zLCBfcGxhdGZvcm1JZDogT2JqZWN0LCBfZG9jdW1lbnQ6IGFueSk7XG4gICAgLyoqXG4gICAgICogTWFudWFsbHkgYWN0aXZhdGUgcmFuZ2Ugb2YgYnJlYWtwb2ludHNcbiAgICAgKiBAcGFyYW0gbGlzdCBhcnJheSBvZiBtZWRpYVF1ZXJ5IG9yIGFsaWFzIHN0cmluZ3NcbiAgICAgKi9cbiAgICBhY3RpdmF0ZShsaXN0OiBzdHJpbmdbXSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVzdG9yZSBvcmlnaW5hbCwgJ3JlYWwnIGJyZWFrcG9pbnRzIGFuZCBlbWl0IGV2ZW50c1xuICAgICAqIHRvIHRyaWdnZXIgc3RyZWFtIG5vdGlmaWNhdGlvblxuICAgICAqL1xuICAgIHJlc3RvcmUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBXaGVuZXZlciB3aW5kb3cgcmVzaXplcywgaW1tZWRpYXRlbHkgYXV0by1yZXN0b3JlIG9yaWdpbmFsXG4gICAgICogYWN0aXZhdGlvbnMgKGlmIHdlIGFyZSBzaW11bGF0aW5nIGFjdGl2YXRpb25zKVxuICAgICAqL1xuICAgIHByaXZhdGUgcHJlcGFyZUF1dG9SZXN0b3JlO1xuICAgIC8qKlxuICAgICAqIE5vdGlmeSBhbGwgbWF0Y2hNZWRpYSBzdWJzY3JpYmVycyBvZiBkZS1hY3RpdmF0aW9uc1xuICAgICAqXG4gICAgICogTm90ZTogd2UgbXVzdCBmb3JjZSAnbWF0Y2hlcycgdXBkYXRlcyBmb3JcbiAgICAgKiAgICAgICBmdXR1cmUgbWF0Y2hNZWRpYTo6YWN0aXZhdGlvbiBsb29rdXBzXG4gICAgICovXG4gICAgcHJpdmF0ZSBkZWFjdGl2YXRlQWxsO1xuICAgIC8qKlxuICAgICAqIENhY2hlIGN1cnJlbnQgYWN0aXZhdGlvbnMgYXMgc29ydGVkLCBwcmlvcml0aXplZCBsaXN0IG9mIE1lZGlhQ2hhbmdlc1xuICAgICAqL1xuICAgIHByaXZhdGUgc2F2ZUFjdGl2YXRpb25zO1xuICAgIC8qKlxuICAgICAqIEZvcmNlIHNldCBtYW51YWwgYWN0aXZhdGlvbnMgZm9yIHNwZWNpZmllZCBtZWRpYVF1ZXJ5IGxpc3RcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldEFjdGl2YXRpb25zO1xuICAgIC8qKlxuICAgICAqIEZvciBzcGVjaWZpZWQgbWVkaWFRdWVyeSBsaXN0IG1hbnVhbGx5IHNpbXVsYXRlIGFjdGl2YXRpb25zIG9yIGRlYWN0aXZhdGlvbnNcbiAgICAgKi9cbiAgICBwcml2YXRlIHNpbXVsYXRlTWVkaWFDaGFuZ2VzO1xuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgY3VycmVudCByZWdpc3RyeSB3aXRoIHNpbXVsYXRlZCByZWdpc3RyeS4uLlxuICAgICAqIE5vdGU6IHRoaXMgaXMgcmVxdWlyZWQgc2luY2UgTWVkaWFRdWVyeUxpc3Q6Om1hdGNoZXMgaXMgJ3JlYWRPbmx5J1xuICAgICAqL1xuICAgIHByaXZhdGUgZm9yY2VSZWdpc3RyeU1hdGNoZXM7XG4gICAgLyoqXG4gICAgICogU2F2ZSBjdXJyZW50IE1hdGNoTWVkaWE6OnJlZ2lzdHJ5IGl0ZW1zLlxuICAgICAqL1xuICAgIHByaXZhdGUgY2FjaGVSZWdpc3RyeU1hdGNoZXM7XG4gICAgLyoqXG4gICAgICogUmVzdG9yZSBvcmlnaW5hbCwgJ3RydWUnIHJlZ2lzdHJ5XG4gICAgICovXG4gICAgcHJpdmF0ZSByZXN0b3JlUmVnaXN0cnlNYXRjaGVzO1xuICAgIC8qKlxuICAgICAqIE1hbnVhbGx5IGVtaXQgYSBNZWRpYUNoYW5nZSBldmVudCB2aWEgdGhlIE1hdGNoTWVkaWEgdG8gTWVkaWFNYXJzaGFsbGVyIGFuZCBNZWRpYU9ic2VydmVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBlbWl0Q2hhbmdlRXZlbnQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjdXJyZW50QWN0aXZhdGlvbnM7XG4gICAgcHJpdmF0ZSBoYXNDYWNoZWRSZWdpc3RyeU1hdGNoZXM7XG4gICAgcHJpdmF0ZSBvcmlnaW5hbEFjdGl2YXRpb25zO1xuICAgIHByaXZhdGUgb3JpZ2luYWxSZWdpc3RyeTtcbiAgICBwcml2YXRlIHJlc2l6ZVN1YnNjcmlwdGlvbjtcbn1cbiJdfQ==