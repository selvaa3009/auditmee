import { Injectable } from '@angular/core';
import { PdfDefinition } from '../objects/pdf';
import * as pdfMakeCore from 'pdfmake/build/pdfmake';
import * as pdfMakeFonts from 'pdfmake/build/vfs_fonts';
export var PdfmakeService = (function () {
    function PdfmakeService() {
        this.pageSize = 'LETTER';
        this.pageOrientation = 'portrait';
        this.pdfMake = pdfMakeCore;
        this.pdfMake.vfs = pdfMakeFonts.pdfMake.vfs;
    }
    PdfmakeService.prototype.create = function () {
        if (this.documentDefinition) {
            this.destroy();
        }
        this.documentDefinition = new PdfDefinition();
    };
    PdfmakeService.prototype.destroy = function () {
        this.documentDefinition = null;
    };
    PdfmakeService.prototype.open = function () {
        this.pdfMake.createPdf(this.getPdfDefinition()).open();
    };
    PdfmakeService.prototype.print = function () {
        this.pdfMake.createPdf(this.getPdfDefinition()).print();
    };
    PdfmakeService.prototype.download = function (name) {
        this.pdfMake.createPdf(this.getPdfDefinition()).download(name);
    };
    PdfmakeService.prototype.configureStyles = function (styles) {
        this.getPdfDefinition().styles = styles;
    };
    PdfmakeService.prototype.addText = function (text, style, pageBreak) {
        this.getPdfDefinition().content.push({ text: text, style: style, pageBreak: pageBreak });
    };
    PdfmakeService.prototype.addColumns = function (columnsText) {
        var columns = [];
        for (var _i = 0, columnsText_1 = columnsText; _i < columnsText_1.length; _i++) {
            var column = columnsText_1[_i];
            columns.push({ text: column });
        }
        this.getPdfDefinition().content.push({ columns: columns });
    };
    PdfmakeService.prototype.addTable = function (table) {
        var body = [];
        if (table) {
            if (table.headers) {
                body.push(table.headers.get());
            }
            if (table.rows) {
                for (var _i = 0, _a = table.rows; _i < _a.length; _i++) {
                    var row = _a[_i];
                    body.push(row.get());
                }
            }
            this.getPdfDefinition().content.push({ table: { widths: table.widths, body: body } });
        }
    };
    PdfmakeService.prototype.addImage = function (url, width, height) {
        var _this = this;
        var image = new Image();
        image.setAttribute('crossOrigin', 'anonymous');
        image.src = url;
        image.onload = function () {
            var canvas = document.createElement('canvas');
            canvas.width = image.naturalWidth;
            canvas.height = image.naturalHeight;
            canvas.getContext('2d').drawImage(image, 0, 0);
            if (width && !height) {
                height = width;
            }
            var finalImage = {
                image: canvas.toDataURL('image/png'),
                width: width ? width : image.naturalWidth,
                height: height ? height : image.naturalHeight
            };
            _this.getPdfDefinition().content.push(finalImage);
            canvas = null;
        };
    };
    PdfmakeService.prototype.addUnorderedlist = function (items) {
        this.documentDefinition.content.push({ ul: items });
    };
    PdfmakeService.prototype.addOrderedList = function (items, reversed, start) {
        if (reversed === void 0) { reversed = false; }
        this.getPdfDefinition().content.push({ reversed: reversed, start: start, ol: items });
    };
    PdfmakeService.prototype.getPdfDefinition = function () {
        if (this.documentDefinition) {
            return this.documentDefinition;
        }
        else {
            throw new Error('The document isn\'t created! Please use the create()" method to create it before use it.');
        }
    };
    PdfmakeService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    PdfmakeService.ctorParameters = function () { return []; };
    return PdfmakeService;
}());
//# sourceMappingURL=pdfmake.service.js.map